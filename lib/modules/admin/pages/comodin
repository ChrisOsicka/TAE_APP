import 'package:flutter/material.dart';
import 'package:tae_app/modules/admin/pages/branch_selection_tab.dart';
import 'package:tae_app/modules/admin/pages/profile_screen.dart';
import 'package:tae_app/modules/admin/pages/wallet_screen.dart';
import 'package:tae_app/modules/admin/widgets/adaptive_branch_list.dart';
import 'package:tae_app/modules/admin/widgets/custom_navigation_bar_admin.dart';
import 'package:tae_app/modules/admin/widgets/notes_button.dart';
import 'package:tae_app/modules/admin/widgets/search_bar.dart';

class ActivitiesSection extends StatefulWidget {
  // Esto se ocupa para saber que grupo fue seleccionado antes de llegar a la parte de actividades
  final String? groupName; // Par√°metro opcional

  const ActivitiesSection({super.key, this.groupName});

  @override
  State<ActivitiesSection> createState() => _ActivitiesSectionState();
}

class _ActivitiesSectionState extends State<ActivitiesSection> {
  // Prop√≥sito: Guarda el √≠ndice de la pantalla actualmente seleccionada
  int _selectedIndex = 0;

  // Lista de pantallas que cambiar√°n
  // Aqu√≠ defines las pantallas que se mostrar√°n para cada tab
  List<Widget> get _screens => [
    //HomeScreen(),
    ActivitiesSectionScreen(
      groupName: widget.groupName,
    ), // üëà Lo pasamos a la pantalla interna), // temporal, cambia seg√∫n lo que queramos hacer para "recargar" la pagina
    WalletScreen(),
    ProfileScreen(),
  ];

  // M√©todo que se llama al tocar un √≠cono
  // Actualiza el estado con el nuevo √≠ndice seleccionado
  void _onItemTapped(int index) {
    // setState(): Notifica a Flutter que debe reconstruir la interfaz
    setState(() {
      _selectedIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    // Scaffold ‚Äî La base visual de la pantalla
    return Scaffold(
      appBar: AppBar(
        title: Text(
          widget.groupName ?? 'Actividades',
          style: const TextStyle(color: Colors.white),
        ),
        backgroundColor: Colors.black,
        iconTheme: const IconThemeData(color: Colors.white),
      ),
      // Muestra la pantalla correspondiente al √≠ndice seleccionado
      // body: Muestra la pantalla actual seg√∫n _selectedIndex
      body: _screens[_selectedIndex],
      // Bottom navigation bar
      // Es la barra que aparece en la parte inferior de la pantalla.
      //Permite que el usuario navegue entre diferentes secciones de la app (por ejemplo: inicio, cartera, perfil).
      bottomNavigationBar: CustomNavigationBarAdmin(
        //(qu√© pantalla est√° activa).
        currentIndex: _selectedIndex,
        // (qu√© hacer cuando el usuario cambia de pesta√±a).
        onTap: _onItemTapped,
      ),
    );
  }
}

class ActivitiesSectionScreen extends StatelessWidget {
  final String? groupName; // üëà Recibe el nombre

  // Lista de mapas List<Map<String, dynamic> ->
  // - List: es una lista, como un conjunto ordenado de elementos.
  // - Map<String, dynamic>: es un mapa o diccionario. Tiene:
  //    - claves (keys): "name", "classes", "participants"
  //    - valores (values): "Sucursal A", 4, 70
  // final en Dart: Cuando declaras una variable como final, no puedes reasignarla, o sea:
  // Puedes modificar el contenido de la lista, pero no puedes asignar una nueva lista a esa variable.
  // final List<Map<String, dynamic>> branches = [...];
  // No puedes cambiar todo branches por otra lista nueva.
  // S√≠ puedes agregar, quitar o cambiar elementos dentro de la lista.

  final List<Map<String, dynamic>> branches = [
    {"name": "Centro Sur", "classes": 4, "participants": 70},
    {"name": "Tlacote", "classes": 5, "participants": 150},
    {"name": "Juriquilla", "classes": 3, "participants": 65},
  ];
  ActivitiesSectionScreen({super.key, this.groupName});

  // @override significa que est√°s reescribiendo un m√©todo que ya existe en la clase padre (StatelessWidget).
  // build(BuildContext context) es el m√©todo que crea lo que se va a mostrar en pantalla
  // Todo lo que retorne el build es lo que ver√° el usuario cuando abra esa pantalla .
  @override
  Widget build(BuildContext context) {
    // Scaffold ‚Äî La base visual de la pantalla
    return Scaffold(
      backgroundColor: Colors.white,
      // body: lo que va dentro del cuerpo principal de la pantalla.
      // SafeArea: evita que los elementos queden debajo del notch, barra de estado o botones del sistema.
      /*
        NOTA: El notch es la parte recortada de la pantalla en algunos 
        celulares modernos (como iPhones o algunos Android) 
        donde est√° la c√°mara frontal o sensores.
      */
      body: SafeArea(
        // Padding ‚Äî Espacio alrededor del contenido
        // Padding es un widget que agrega espacio alrededor de su hijo (en este caso, una Column).
        child: Padding(
          // Aqu√≠ aplicamos 16 de margen horizontal (izquierda y derecha) y 10 vertical (arriba y abajo).
          //   padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),

          // Column ‚Äî Apilar widgets verticalmente, apila widgets de arriba hacia abaj
          child: Column(
            // Alinea el contenido al inicio horizontal (izquierda).
            crossAxisAlignment: CrossAxisAlignment.start,
            // children (en plural) es una lista de
            // widgets hijos que van uno debajo del otro en una Column.
            // NOTA: No confundir con child (en singular), que solo permite un √∫nico widget hijo.
            children: [
              // Para mostrar el nombre del grupo seleccionado. NA

              // Llamamos a la barra de busqueda que ya se separa en un widget a parte.
              BarSearch(),
              // Crea un espacio vertical de 10 p√≠xeles entre la caja de b√∫squeda y el siguiente elemento.
              const SizedBox(height: 20),

              // Agregar Sucursal
              // Alinea su hijo al lado derecho (Alignment.centerRight).
              Center(
                child: Row(
                  //mainAxisAlignment: MainAxisAlignment.end, // los pone a la derecha
                  mainAxisAlignment:
                      MainAxisAlignment
                          .spaceBetween, // Separa los 2 grupos a los extremos

                  children: [
                    // Primer bot√≥n: Ver alumnos
                    InkWell(
                      onTap: () {
                        print("Ver alumnos clickeado");
                      },
                      borderRadius: BorderRadius.circular(
                        20,
                      ), // efecto ripple redondeado
                      child: Container(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 30,
                          vertical: 6,
                        ),
                        decoration: BoxDecoration(
                          border: Border.all(
                            color: const Color.fromARGB(255, 176, 180, 184),
                            width: 1,
                          ),
                          borderRadius: BorderRadius.circular(
                            20,
                          ), // borde circular
                        ),
                        child: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: const [
                            Text(
                              'Ver alumnos',
                              style: TextStyle(
                                fontWeight: FontWeight.bold,
                                fontSize: 14,
                              ),
                            ),
                            SizedBox(width: 5),
                            Icon(
                              Icons.remove_red_eye,
                              size: 18,
                            ), // √≠cono distinto
                          ],
                        ),
                      ),
                    ),
                    
                    
                    //const SizedBox(width: 10), // separaci√≥n entre los 2

                    // Segundo bot√≥n: Agregar secci√≥n
                    InkWell(
                      onTap: () {
                        print("Agregar Secci√≥n clickeado");
                      },
                      borderRadius: BorderRadius.circular(20),
                      child: Container(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 10,
                          vertical: 6,
                        ),
                        decoration: BoxDecoration(
                          //color: const Color.fromARGB(133, 219, 221, 221), // fondo de color
                          borderRadius: BorderRadius.circular(20),
                        ),
                        child: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: const [
                            Text(
                              'Agregar Secci√≥n',
                              style: TextStyle(
                                fontWeight: FontWeight.bold,
                                fontSize: 14,
                                color: Color.fromARGB(
                                  255,
                                  0,
                                  0,
                                  0,
                                ), // contraste con fondo verde
                              ),
                            ),
                            SizedBox(width: 5),
                            Icon(
                              Icons.add_circle_outline,
                              color: Color.fromARGB(255, 0, 0, 0),
                              size: 18,
                            ),
                          ],
                        ),
                      ),
                    ),
                  ],
                ),
              ),

              const SizedBox(height: 20),

              // Lista de sucursales
              // Mostrar una lista de tarjetas con detalles de cada sucursal
              SingleChildScrollView(
                scrollDirection:
                    Axis.horizontal, // ‚Üê ¬°Esto permite desplazamiento horizontal!

                child: Row(
                  children: [
                    PopupMenuButton<String>(
                      onSelected: (String? value) async {
                        if (value == 'editar') {
                          print("Editar nombre");
                          
                          // Aqu√≠ puedes abrir un di√°logo, navegar a edici√≥n, etc.
                        } else if (value == 'borrar') {
                          print("Borrar secci√≥n");
                          bool? confirmar = await showDialog<bool>(
                            context: context,
                            builder: (context) => AlertDialog(
                              title: const Text('¬øBorrar secci√≥n?'),
                              content: const Text('Esta acci√≥n no se puede deshacer.'),
                              actions: [
                                TextButton(
                                  onPressed: () => Navigator.pop(context, false),
                                  child: const Text('Cancelar'),
                                ),
                                TextButton(
                                  onPressed: () => Navigator.pop(context, true),
                                  child: const Text('Borrar', style: TextStyle(color: Colors.red)),
                                ),
                              ],
                            ),
                          );
                          if (confirmar == true) {
                            print("¬°Secci√≥n 'Cintas Blancas' borrada!");
                            // Aqu√≠ podr√≠as eliminar este elemento de una lista, si est√°s en StatefulWidget
                          }
                        }
                      },
                      child: Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Icon(
                              Icons.more_vert,
                              size: 20,
                            ),
                            const SizedBox(width: 8),
                            Text(
                              'Cintas Blancas',
                              style: TextStyle(
                                fontSize: 20,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ],
                        ),
                      ),
                      itemBuilder: (BuildContext context) {
                        return [
                          PopupMenuItem<String>(
                            value: 'editar',
                            child: const Text('Editar nombre'),
                            
                            
                          ),
                          PopupMenuItem<String>(
                            value: 'borrar',
                            child: const Text('Borrar secci√≥n'),
                          ),
                        ];
                      },
                    ),

                    SizedBox(width: 25), // ‚Üê espacio horizontal


                    // Grupo 2: √çcono de agregar ‚Üí CLICKEABLE POR SEPARADO
                    InkWell(
                      onTap: () {
                        print("Agregar clickeado");
                      },
                      borderRadius: BorderRadius.circular(8),
                      child: const Padding(
                        padding: EdgeInsets.all(12.0),
                        child: Icon(Icons.add_circle_outline),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),

      // Bot√≥n flotante
      /*
      Un bot√≥n flotante (Floating Action Button o FAB) es 
      un bot√≥n circular y elevado que aparece sobre 
      la interfaz, normalmente en la esquina inferior derecha.
       */
      floatingActionButton: NotesButton(),
    );
  }
}
